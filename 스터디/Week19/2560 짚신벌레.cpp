/*
---------------------------------------------------------------------------------------
풀이방식
0. 하루에 태어나는 벌레 수 = 성체 수!

1. 살아있는 벌레수(total)과 성체수(adult)변수를 사용한다
2. 일단 d일 전에 태어난 애들을 죽인다(total수감소)
	=> 그 전에 태어난 애들은 그 전의 루프에서 이미 죽었으므로 딱 d일 전 애들만 죽이면 됨
3. 같은 방식으로 b일 전에 태어난 애들을 성체 수에서 감소시킨다
4. a일 전에 태어난 애들의 수만큼 adult 값 증가
5. 현재 성체 수 만큼 애들이 태어남 (bugs[day]에 저장)
6. 전체 개체 수도 업데이트
--------------------------------------------------------------------------------------

오답노트
1. 시간초과 : n이 최대 1000000이므로 이중포문으로는 하기 어렵다
	그냥 시뮬레이션은 안 됨 => 살아있는 벌레 수와 성체 수만 가지고도 할 수 있다
	(1) 하루에 태어나는 벌레 수는 성체 수와 동일
	(2) a일, b일, d일전에 태어난 애들만 고려해서 변수들을 조작한다
		그 전에 태어난 애들은 이미 그 전 루프에서 처리했으므로 배열을 다 검사하지 않아도 된다

2. 범위초과 방지때문에 1000으로 나눠줄 때, 뺄셈의 경우 %의 결과가 음수로 나올 수 있음!
	=> (A-B) % M = ((A%M)-(B%M)+M)%M으로 해줘야 함
	=> 덧셈은 그냥 A += B%M으로 해도 된다
	=> 이것때문에 계속 틀림...!
---------------------------------------------------------------------------------------
*/
#include <iostream>
using namespace std;

int a, b, d, N;
int bugs[1000000]; // n일째 태어난 아이들의 수
int total;
int adult;
int main() {
	cin >> a >> b >> d >> N;
	bugs[0] = 1;
	total = 1;
	for (int day = 1; day <= N; day++) {
		// d일 전에 태어난 애들 죽이기
		if (day >= d) {
			total = ((total%1000)-(bugs[day - d]%1000)+1000) % 1000;
		}
		// 성체 수 감소
		if (day >= b) {
			adult = ((adult % 1000) - (bugs[day - b] % 1000)+1000) % 1000;
		}
		// 성체 수 증가
		if (day >= a) {
			adult += bugs[day - a] % 1000;
			adult %= 1000;
		}

		bugs[day] = adult; // 새로 태어난 애들(성체수만큼)

		total += adult%1000;
		total %= 1000;

	}
	/* 시간초과 코드
	// day : 날짜, birth : 태어난 날
	for (int day = 1; day <= N; day++) {
		int baby = 0; // 태어난 개체의 수

		for (int birth = 0; birth < day; birth++) {
			//죽이기
			if (day - birth >= d) {
				// 처음 죽인 애면 total줄이기
				if (day - birth == d)
					total -= (bugs[birth])%1000;
				//이미 죽은 애면 total은 그대로
				continue;
			}
			if (day - birth >= b)
				continue;
			// 개체 추가
			if (day - birth >= a) {
				baby += bugs[birth]%1000;
				total += (bugs[birth])%1000;
			}

		}
		bugs[day] = baby;
		total %= 1000;
	}
	*/
	cout << total%1000;
	return 0;
}
